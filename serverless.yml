
#================================================================
# This project was generated by Serverless HQ:
# Your home base for powerfully easy Serverless scaffolding.
# Made in knoxville, tn by haseebnqureshi (_hq)
#================================================================

frameworkVersion: ">=1.6.0 <2.0.0"

service: blocky-backend

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  profile: default
  versionFunctions: false
  iamRoleStatements:

    # Lambda iam role permissions onto dynamodb
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:*:*:*

  environment:

    # Project environment variables
    SERVICE: blocky_backend
    PROVIDER_NAME: aws
    PROVIDER_RUNTIME: nodejs6.10
    PROVIDER_STAGE: dev
    PROVIDER_REGION: us-east-1
    PROVIDER_PROFILE: default

    USERS_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-users
    DEVICES_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-devices
    SCRIPTS_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-scripts
    DASHBOARDS_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-dashboards

# Self-referenced vars
custom:

  # Crud-enabled env variables (for yml self-reference)
  USERS_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-users
  DEVICES_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-devices
  SCRIPTS_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-scripts
  DASHBOARDS_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-dashboards

  dynamodb:
    start:
      port: 8000
      inMemory: false
      migrate: true
    migration:
      dir: offline/migrations

functions:

  auth:
    handler: lib/auth.auth

  #==========================
  # Users Methods
  #==========================

  # NewCreate
  UsersNew:
    handler: users/create.create
    events:
      - http:
          path: users/new_create
          method: get
          authorizer: auth
          cors: true

  UsersSignup:
    handler: users/signup.signup
    events:
      - http:
          path: users/signup
          method: post
          cors: true

  UsersLogin:
    handler: users/login.login
    events:
      - http:
          path: users/login
          method: post
          cors: true

  UsersChangePassword:
    handler: users/change-password.changePassword
    events:
      - http:
          path: users/password
          method: post
          authorizer: auth
          cors: true

  UsersChangeAuthKey:
    handler: users/change-auth-key.changeAuthKey
    events:
      - http:
          path: users/changeAuthKey
          method: post
          authorizer: auth
          cors: true

  UsersChangeProfile:
    handler: users/change-profile.changeProfile
    events:
      - http:
          path: users/profile
          method: post
          authorizer: auth
          cors: true

  #==========================
  # Devices Methods
  #==========================

  # Create
  DevicesCreate:
    handler: devices/create.create
    events:
      - http:
          path: devices
          method: post
          authorizer : auth
          cors: true

  # ReadAll
  DevicesReadAll:
    handler: devices/list.listByUser
    events:
      - http:
          path: devices
          method: get
          authorizer : auth
          cors: true

  # Read
  DevicesRead:
    handler: devices.read
    events:
      - http:
          path: devices/{id}
          method: get
          cors: true

  # Update
  DevicesUpdate:
    handler: devices/update.update
    events:
      - http:
          path: devices/{id}
          method: put
          authorizer: auth
          cors: true

  # Delete
  DevicesDelete:
    handler: devices/delete.delete
    events:
      - http:
          path: devices/{id}
          method: delete
          authorizer : auth
          cors: true

  #==========================
  # Scripts Methods
  #==========================

  # Create
  ScriptsCreate:
    handler: scripts/create.create
    events:
      - http:
          path: scripts
          method: post
          authorizer: auth
          cors: true

  # ReadAll
  ScriptsReadAll:
    handler: scripts/list.listByUser
    events:
      - http:
          path: scripts
          method: get
          authorizer : auth
          cors: true

  # Read
  ScriptsRead:
    handler: scripts.read
    events:
      - http:
          path: scripts/{id}
          method: get
          cors: true

  # Update
  ScriptsUpdate:
    handler: scripts/update.update
    events:
      - http:
          path: scripts/{id}
          method: put
          authorizer: auth
          cors: true
          
  # Delete
  ScriptsDelete:
    handler: scripts/delete.delete
    events:
      - http:
          path: scripts/{id}
          method: delete
          authorizer: auth
          cors: true

  #==========================
  # Dashboards Methods
  #==========================

  # Create
  DashboardsCreate:
    handler: dashboards.create
    events:
      - http:
          path: dashboards
          method: post
          cors: true

  # ReadAll
  DashboardsReadAll:
    handler: dashboards.readAll
    events:
      - http:
          path: dashboards
          method: get
          cors: true

  # Read
  DashboardsRead:
    handler: dashboards.read
    events:
      - http:
          path: dashboards/{id}
          method: get
          cors: true

  # Update
  DashboardsUpdate:
    handler: dashboards.update
    events:
      - http:
          path: dashboards/{id}
          method: put
          cors: true

  # Delete
  DashboardsDelete:
    handler: dashboards.delete
    events:
      - http:
          path: dashboards/{id}
          method: delete
          cors: true


resources:
  Resources:

    # users dynamodb table resource
    UsersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.USERS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
        - IndexName: UsersEmailIndex
          KeySchema:
          - AttributeName: email
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

    # devices dynamodb table resource
    DevicesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.DEVICES_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: ownerId
            AttributeType: S
        KeySchema:
          - AttributeName : ownerId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        

    # scripts dynamodb table resource
    ScriptsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.SCRIPTS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: ownerId
            AttributeType: S
        KeySchema:
          - AttributeName : ownerId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # dashboards dynamodb table resource
    DashboardsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.DASHBOARDS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

# Keeping packages small by excluding node_modules
package:
  exclude:
    #- node_modules/**
    - lib/node_modules/aws-sdk/**

plugins:
  - serverless-dynamodb-local
  - serverless-offline  


#================================================================
# This project was generated by Serverless HQ:
# Your home base for powerfully easy Serverless scaffolding.
# 
# Get going in seconds:
# 1) npm install serverless-hq -g
# 2) sls-hq
# 
# Crafted by hq (2016-2017)
# Twitter.com/_hq, github.com/haseebnqureshi
# Made in knoxville, tennessee
#================================================================
